@page "/details/{text}"
@using Syncfusion.Blazor.Charts
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Layouts
@using System.Net
@using System.IO
@using System.Text.Json;
@attribute [Authorize]
@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider

<h3>@text Details: </h3>

@if (ticker == null)
{
    <a>Loading...</a>
}
else
{
    <button @onclick="@(() => AddToWatchlist())" id="special">Add to watchlist</button>
    <SfTab>
        <TabItems>
            <TabItem>
                <ChildContent>
                    <TabHeader Text="HTML"></TabHeader>
                </ChildContent>
                <ContentTemplate>
                    <div>
                        <p><b>@ticker.ticker</b></p>
                        <p><b>@ticker.name</b></p>
                        <p><a href="@ticker.homepage_url"><b>@ticker.homepage_url</b></a></p>
                        <p>@ticker.description</p>
                    </div>
                </ContentTemplate>
            </TabItem>
            <TabItem>
                <ChildContent>
                    <TabHeader Text="OHLC Chart"></TabHeader>
                </ChildContent>
                <ContentTemplate>
                    <div>
                        <SfStockChart Title="OHCL">
                            <StockChartSeriesCollection>
                                <StockChartSeries DataSource="@Data" Type="ChartSeriesType.Candle" XName="Time" High="h" Low="h" Open="o" Close="c" Volume="v" />
                            </StockChartSeriesCollection>
                        </SfStockChart>
                        <table id="buttonstable" style="padding: 05em">
                            <tr>
                                <td><button @onclick="@(() => CurrentDay())">Current day</button></td>
                                <td><button @onclick="@(() => ThisWeek())">1 week ago</button></td>
                                <td><button @onclick="@(() => ThisMonth())">1 month ago</button></td>
                                <td><button @onclick="@(() => LastThree())">3 months ago</button></td>
                            </tr>
                        </table>
                    </div>
                </ContentTemplate>
            </TabItem>
        </TabItems>
    </SfTab>
}

@code {
    [Parameter]
    public string text { get; set; }

    private TickerInfo ticker { get; set; }
    private List<Stock> Data = new List<Stock>();
    private List<Stock> AllStocks = new List<Stock>();

    private string user;
    private string responseString = "";

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authState.User.Identity.Name;

        ticker = await Http.GetFromJsonAsync<TickerInfo>($"/tickers/info/{text}");


        Stock[] data = await Http.GetFromJsonAsync<Stock[]>($"/tickers/ohlc/{text}");

        AllStocks.AddRange(data);

        Data.AddRange(data);

        var response = Http.PostAsJsonAsync($"/tickers", new TickerWithOhlc { ohlcs = data, ticker = ticker });
    }
    private void CurrentDay()
    {
        var first = AllStocks.Max(e => DateTime.Parse(e.Time));
        Stock today = AllStocks.First(e => DateTime.Parse(e.Time) == first);
        Data = new List<Stock>();
        Data.Add(today);
    }
    private void ThisWeek()
    {
        Data = new List<Stock>(AllStocks.Where(e => (DateTime.Parse(e.Time) > DateTime.Today.AddDays(-7))).ToList());
    }
    private void ThisMonth()
    {
        Data = new List<Stock>(AllStocks.Where(e => (DateTime.Parse(e.Time) > DateTime.Today.AddMonths(-1))).ToList());
    }
    private void LastThree()
    {
        Data = new List<Stock>(AllStocks.ToList());
    }
    private async Task AddToWatchlist()
    {
        using var response = await Http.PostAsJsonAsync($"/watchlist/{user}", ticker);
        responseString = response.IsSuccessStatusCode.ToString();
    }
}
