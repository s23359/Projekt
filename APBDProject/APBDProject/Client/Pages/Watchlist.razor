@page "/watchlist"
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Charts
@attribute [Authorize]
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient Http
@inject NavigationManager navigationManager

<h3 id="welcome">Your watchlist:</h3>
@if (tickers == null)
{
    <p><em>Loading...</em></p>
}
else if (tickers.Length == 0)
{
    <div>Looks like your watchlist is empty. Go to dashboard and select the ones that you want to see in your watchlist.</div>
}
else
{
    <SfGrid DataSource="@tickers" AllowPaging="true" AllowSorting="true">
        <GridPageSettings PageSize="5"></GridPageSettings>
        <GridColumns>
            <GridColumn Field=@nameof(TickerInfo.ticker) HeaderText="Ticker" TextAlign="TextAlign.Center" Width="100"></GridColumn>
            <GridColumn Field=@nameof(TickerInfo.name) HeaderText="Name" TextAlign="TextAlign.Center" Width="100"></GridColumn>
            <GridColumn Field=@nameof(TickerInfo.market) HeaderText="Market" TextAlign="TextAlign.Center" Width="100"></GridColumn>
            <GridColumn Field=@nameof(TickerInfo.locale) HeaderText="Locale" TextAlign="TextAlign.Center" Width="100"></GridColumn>
            <GridColumn HeaderText="Remove from watchlist" Width="50">
                <Template>
                    @{
                        var ticker = (context as TickerInfo);
                        <SfButton @onclick="@((args) => RemoveFromWatchlist(ticker))" CssClass="e-primary">Remove from watchlist</SfButton>

                    }
                </Template>
            </GridColumn>
            <GridColumn Width="50" HeaderText="See details">
                <Template>
                    @{
                        var ticker = (context as TickerInfo);
                        <SfButton @onclick="@((args) => GoToDetails(ticker.ticker))" CssClass="e-danger">See details</SfButton>

                    }
                </Template>
            </GridColumn>
        </GridColumns>
    </SfGrid>
    if (selectedTicker != null)
    {
        <h3>@selectedTicker.ticker Details:</h3>
        <SfTab>
            <TabItems>
                <TabItem>
                    <ChildContent>
                        <TabHeader Text="Company information"></TabHeader>
                    </ChildContent>
                    <ContentTemplate>
                        <div>
                            <p><b>@selectedTicker.ticker</b></p>
                            <p><b>@selectedTicker.name</b></p>
                            <p><a href="@selectedTicker.homepage_url"><b>@selectedTicker.homepage_url</b></a></p>
                            <p>@selectedTicker.description</p>
                        </div>
                    </ContentTemplate>
                </TabItem>
                <TabItem>
                    <ChildContent>
                        <TabHeader Text="OHLC Chart"></TabHeader>
                    </ChildContent>
                    <ContentTemplate>
                        <div>
                            <SfStockChart Title="OHCL">
                                <StockChartSeriesCollection>
                                    <StockChartSeries DataSource="@Data" Type="ChartSeriesType.Candle" XName="Time" High="h" Low="h" Open="o" Close="c" Volume="v" />
                                </StockChartSeriesCollection>
                            </SfStockChart>
                        </div>
                    </ContentTemplate>
                </TabItem>
            </TabItems>
        </SfTab>
    }
}

@code {
    private string user;
    private TickerInfo[] tickers;
    private TickerInfo selectedTicker;

    private List<Stock> Data = new List<Stock>();

    protected override async Task OnInitializedAsync()
    {

        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            user = authState.User.Identity.Name;
            tickers = await Http.GetFromJsonAsync<TickerInfo[]>($"/watchlist/{user}");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }
    private async Task RemoveFromWatchlist(TickerInfo ticker)
    {
        var response = await Http.PostAsJsonAsync($"/watchlist/delete/{user}", ticker);

        tickers = await Http.GetFromJsonAsync<TickerInfo[]>($"/watchlist/{user}");
    }
    private async Task GoToDetails(string ticker)
    {
        selectedTicker = await Http.GetFromJsonAsync<TickerInfo>($"/tickers/info/{ticker}");


        Stock[] data = await Http.GetFromJsonAsync<Stock[]>($"/tickers/ohlc/{ticker}");

        Data = new List<Stock>();

        Data.AddRange(data);
    }
}
